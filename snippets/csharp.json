{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"EventHandler Code Snippet": {
		"prefix": "EventHandler",
		"body": [
		"/// <summary>",
		"/// Handles the <see cref=\"MFEventHandlerType.MFEventHandlerBeforeCheckInChangesFinalize\" /> event.",
		"/// </summary>",
		"/// <param name=\"env\">The vault/object environment.</param>",
		"[EventHandler(MFilesAPI.MFEventHandlerType.MFEventHandlerBeforeCheckInChangesFinalize)]",
		"public void ${2:MyEventHandler}(EventHandlerEnvironment env)",
		"{",
		"    $0",
		"    throw new System.NotImplementedException();",
		"}"
		],
		"description": "Adds a VAF handler for an event handler."
	},
	"Task Processor": {
		"prefix": "TaskProcessor",
		"body": [
		"///[DataMember]",
		"///[RecurringOperationConfiguration(VaultApplication.QueueID, VaultApplication.TaskName)]",
		"///public Frequency ${2:MyEventHandler}Frequency { get; set; }",
		"///",
		"[TaskQueue(Behavior = MFTaskQueueProcessingBehavior.MFProcessingBehaviorSequential)]",
		"public const string QueueID = \"${2:MyEventHandler}.QueID\";",
		"public const string TaskName = \"${2:MyEventHandler}.TaskName\";",
	 	"",
		"[TaskProcessor(QueueID, TaskName, TransactionMode = TransactionMode.Full, MaxRequeues = 0, MaxRetries = 0)]",
		"[ShowOnDashboard(\"${2:MyEventHandler}\", ShowRunCommand = true)]",
		"public void ${2:MyEventHandler}(ITaskProcessingJob<TaskDirective> job)",
		"{",
		"    Vault vault = job.Vault;",
		"    $0",
		"    throw new System.NotImplementedException();",
		"}"
		],
		"description": "Task Processor"
	},
	"ConfigurationTemplate": {
		"prefix": "ConfigurationTemplate",
		"body": [
		"    [DataContract]",
		"    public class Configuration : MFiles.VAF.Extensions.Configuration.ConfigurationBase",
		"    {",
		"        [DataMember]",
		"        [Security(ChangeBy = SecurityAttribute.UserLevel.VaultAdmin)]",
		"        public StructureConfiguration Structure { get; set; } = new StructureConfiguration();",
		"    ",
		"        [DataMember]",
		"        [Security(ChangeBy = SecurityAttribute.UserLevel.VaultAdmin)]",
		"        public SettingsConfiguration Settings { get; set; } = new SettingsConfiguration();",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class SettingsConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(HelpText = \"Is this enabled or not?\")]",
		"        //public bool Enabled { get; set; }",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class StructureConfiguration",
		"    {",
		"        [DataMember]",
		"        public ObjectTypesConfiguration Objects { get; set; } = new ObjectTypesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public ClassesConfiguration Classes { get; set; } = new ClassesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public PropertiesConfiguration Properties { get; set; } = new PropertiesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public ValuelistsConfiguration Valuelists { get; set; } = new ValuelistsConfiguration();",
		"    ",
		"        [DataMember]",
		"        public ValuelistItemsConfiguration ValueslistItems { get; set; } = new ValuelistItemsConfiguration();",
		"    ",
		"        [DataMember]",
		"        public WorkflowsConfiguration Workflows { get; set; } = new WorkflowsConfiguration();",
		"    ",
		"        [DataMember]",
		"        public WorkflowStatesConfiguration States { get; set; } = new WorkflowStatesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public UserGroupsConfiguration UserGroups { get; set; } = new UserGroupsConfiguration();",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ObjectTypesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.Objects.Employee)]",
		"        //[MFObjType(AllowEmpty = true)]",
		"        //public MFIdentifier Customer { get; set; } = Aliases.Objects.Employee;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ClassesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.Classes.Employee)]",
		"        //[MFClass(AllowEmpty = true)]",
		"        //public MFIdentifier Customer { get; set; } = Aliases.Classes.Employee;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class PropertiesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.Properties.Description)]",
		"        //[MFPropertyDef(AllowEmpty = true)]",
		"        //public MFIdentifier Description { get; set; } = Aliases.Properties.Description;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class WorkflowsConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.Workflows.EmployeeDataUpdateWorkflow)]",
		"        //[MFWorkflow(AllowEmpty = true)]",
		"        //public MFIdentifier EmployeeDataUpdateWorkflow { get; set; } = Aliases.Workflows.EmployeeDataUpdateWorkflow;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class WorkflowStatesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.States.EmployeeDataUpdateWorkflow_Draft)]",
		"        //[MFState(AllowEmpty = true, Workflow = Aliases.Workflows.EmployeeDataUpdateWorkflow)]",
		"        //public MFIdentifier EmployeeDataUpdateWorkflow_Updated { get; set; } = Aliases.States.EmployeeDataUpdateWorkflow_Draft;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ValuelistsConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(DefaultValue = Aliases.ValueLists.EmployeeType)]",
		"        //[MFValueList(AllowEmpty = true)]",
		"        //public MFIdentifier EmployeeType { get; set; } = Aliases.ValueLists.EmployeeType;",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ValuelistItemsConfiguration",
		"    {",
		"    ",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class UserGroupsConfiguration",
		"    {",
		"    ",
		"    }",
		"    ",
		"    public static class Aliases",
		"    {",
		"        public static class Objects",
		"        {",
		"            //public const string Employee = \"MF.OT.Employee\";",
		"        }",
		"    ",
		"        public static class Classes",
		"        {",
		"            //public const string Employee = \"MF.CL.Employee\";",
		"        }",
		"    ",
		"        public static class ValueLists",
		"        {",
		"            //public const string EmployeeType = \"MF.VL.EmployeeType\";",
		"        }",
		"    ",
		"        public static class Workflows",
		"        {",
		"            //public const string EmployeeDataUpdateWorkflow = \"MF.WF.EmployeeDataUpdateWorkflow\";",
		"        }",
		"    ",
		"        public static class States",
		"        {",
		"            //public const string EmployeeDataUpdateWorkflow_Draft = \"MF.WFS.EmployeeDataUpdateWorkflow.Draft\";",
		"        }",
		"    ",
		"        public static class UserGroups",
		"        {",
		"    ",
		"        }",
		"    ",
		"        public static class Properties",
		"        {",
		"            //public const string Description = \"MF.PD.Description\";",
		"        }",
		"    }",
		],
		"description": "Config template"
	},
	"ConfigurationTemplateShort": {
		"prefix": "ConfigurationTemplateShort",
		"body": [
		"    [DataContract]",
		"    public class Configuration : MFiles.VAF.Extensions.Configuration.ConfigurationBase",
		"    {",
		"        [DataMember]",
		"        [Security(ChangeBy = SecurityAttribute.UserLevel.VaultAdmin)]",
		"        public StructureConfiguration Structure { get; set; } = new StructureConfiguration();",
		"    ",
		"        [DataMember]",
		"        [Security(ChangeBy = SecurityAttribute.UserLevel.VaultAdmin)]",
		"        public SettingsConfiguration Settings { get; set; } = new SettingsConfiguration();",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class SettingsConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[JsonConfEditor(HelpText = \"Is this enabled or not?\")]",
		"        //public bool Enabled { get; set; }",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class StructureConfiguration",
		"    {",
		"        [DataMember]",
		"        public ObjectTypesConfiguration Objects { get; set; } = new ObjectTypesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public ClassesConfiguration Classes { get; set; } = new ClassesConfiguration();",
		"    ",
		"        [DataMember]",
		"        public PropertiesConfiguration Properties { get; set; } = new PropertiesConfiguration();",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ObjectTypesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[MFObjType(AllowEmpty = true)]",
		"        //public MFIdentifier Customer { get; set; }",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class ClassesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[MFClass(AllowEmpty = true)]",
		"        //public MFIdentifier Customer { get; set; }",
		"    }",
		"    ",
		"    [DataContract]",
		"    public class PropertiesConfiguration",
		"    {",
		"        //[DataMember]",
		"        //[MFPropertyDef(AllowEmpty = true)]",
		"        //public MFIdentifier Description { get; set; }",
		"    }",
		],
		"description": "Config template"
	},
	"VaultApplicationExtension": {
		"prefix": "VaultApplicationExtension",
		"body": [
		"public class VaultApplication : MFiles.VAF.Extensions.ConfigurableVaultApplicationBase<Configuration>",
    	"{",
		"    $0",
    	"}"
		],
		"description": "VaultApplicationExtension"
	},
	"Logger Debug": {
		"prefix": "logDebug",
		"body": [
		"_logger.Debug($\"${1:message}\");"
		],
		"description": "Log a debug message using _logger.Debug"
	},
	"Logger Debug Alt": {
		"prefix": "debugLog",
		"body": [
		"_logger.Debug($\"${1:message}\");"
		],
		"description": "Log a debug message using _logger.Debug"
	},
	"Logger Error": {
		"prefix": "logError",
		"body": [
		"_logger.Error(ex, $\"${1:message}\");"
		],
		"description": "Log an error message using _logger.Error"
	},
	"Logger Error Alt": {
		"prefix": "errorLog",
		"body": [
		"_logger.Error(ex, $\"${1:message}\");"
		],
		"description": "Log an error message using _logger.Error"
	}
}